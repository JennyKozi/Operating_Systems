Λειτουργικά Συστήματα 2023 - Τμήμα Αρτίων - Προγραμματιστική Άσκηση 2

Ευγενία Κοζή
Α.Μ: 1115202000082

Με το Makefile το πρόγραμμα μεταγλωττίζεται με χρήση separate compilation και linker (δηλαδή ξεχωριστή μεταγλώττιση κάθε αρχείου κώδικα .c και δημιουργία .o αρχείων).

Έχει γίνει έλεγχος με valgrind και το πρόγραμμα δεν έχει memory leaks.

Γίνονται έλεγχοι ότι έχουμε δώσει σωστά arguments και flags στην εντολή εκτέλεσης του προγράμματος.

Γίνεται πάντα έλεγχος αν δεσμεύτηκε η μνήμη από τη malloc και αν αποτύχει το πρόγραμμα τερματίζει.

Γίνεται πάντα έλεγχος για το αν άνοιξε σωστά το αρχείο με την open.
Πάντα κλείνουμε το αρχείο με close.

Τα processes κλείνουν τα pipes που δε χρησιμοποιούν και τα pipes που χρησιμοποίησαν και δε χρειάζονται πλέον.

Όλοι οι πίνακες δημιουργούνται και επεκτείνονται δυναμικά όσο τρέχει το πρόγραμμα.

Δε γίνεται χρήση στατικών πινάκων/δομών που δεσμεύονται στη διάρκεια της συμβολομετάφρασης του προγράμματος.

Για την ταξινόμηση των εγγραφών από τους sorters χρησιμοποιούνται οι αλγόριθμοι bubble sort και selection sort.
Τα εκτελέσιμά τους είναι τα bubblesort και selectionsort (αυτά είναι τα ορίσματα που δίνουμε στη γραμμή εντολών με flag e1 και e2).

Ο χρόνος των sorters για μικρά datasets είναι πρακτικά 0.

Ο root χάνει κάποια από τα σήματα USR1 και USR2 που του στέλνουν τα παιδιά του.

Ενδεικτικές εντολές run:
./mysort -i voters50.bin -k 4 -e1 bubblesort -e2 selectionsort
./mysort -i voters50000.bin -k 7 -e1 bubblesort -e2 selectionsort
./mysort -i voters100000.bin -k 20 -e1 bubblesort -e2 selectionsort

*header.h: Αρχείο επικεφαλίδας με ορισμούς που χρειάζονται όλα τα .c αρχεία κώδικα.

*mysort.c:

-Root: ρίζα

Δημιουργεί πίνακες που θα έχουν σημαντικές πληροφορίες όπως το pid των splitters, το από ποιο σημείο του αρχείου θα αναλάβει ο κάθε splitter,
το πόσα records θα αναλάβει ο κάθε splitter και τα pipes επικοινωνίας μεταξύ splitters και root.

Με fork ο root δημιουργεί k splitters.

Ορίζει τον τρόπο που θα αντιμετωπίζει τα σήματα USR1 και USR2 που θα λαμβάνει από τους splitters και τους sorters.

Περιμένει με τη σειρά τον κάθε splitter να τελειώσει και διαβάζει μέσω pipes τα ταξινομημένα arrays των splitters.
Μετά διαβάζει τους χρόνους των sorters του κάθε splitter.

Συγχωνεύει όλους τους ταξινομημένους πίνακες που έλαβε από τους splitters σε έναν τελικό πίνακα που εκτυπώνει.

-Splitters: ενδιάμεσοι κόμβοι

Κάθε splitter έχει έναν συγκεκριμένο αριθμό από sorters που θα δημιουργήσει.

Οι εγγραφές μοιράζονται ισάξια στους sorters και για όσες περισσέψουν παίρνουν μία παραπάνω εγγραφή οι πρώτοι 'remaining_load_sorters' sorters του κάθε splitter.

Δημιουργούν πίνακες που θα έχουν σημαντικές πληροφορίες όπως το pid των sorters, το από ποιο σημείο του αρχείου θα αναλάβει ο κάθε sorter,
το πόσα records θα αναλάβει ο κάθε sorter και τα pipes επικοινωνίας μεταξύ splitters και sorters.

Δημιουργούν 'numof_sorters' sorters με fork.

Περιμένουν με τη σειρά τον κάθε sorter να τελειώσει και διαβάζουν μέσω pipes τα ταξινομημένα arrays που γράφει ο κάθε sorter στο αντίστοιχο pipe.
Το τελευταίο πράγμα που διαβάζουν από κάθε sorter είναι ο χρόνος εκτέλεσής του.

Συγχωνεύουν όλους τους ταξινομημένους πίνακες που έλαβαν από τους sorters σε έναν τελικό πίνακα.

Γράφουν στο pipe επικοινωνίας με τον root τις ταξινομημένες εγγραφές και τον χρόνο που έκανε ο κάθε sorter που δημιούργησαν.

Στέλνουν σήμα USR1 στον root όταν τελειώνουν.

-Sorters: κόμβοι-φύλλα

Κατά τη δημιουργία τους καλούν με execl τα προγράμματα bubblesort και selectionsort, δίνοντας κατάλληλα ορίσματα για τη γραμμή εντολών.

*bubblesort.c, selectionsort.c: κώδικας με τους αντίστοιχους αλγορίθμους bubble sort και selection sort

Παίρνουν ορίσματα από τη γραμμή εντολών:
-argv[1]: αρχείο δεδομένων
-argv[2]: δείκτης στο αρχείο (από ποια εγγραφή θα ξεκινήσει να διαβάζει)
-argv[3]: αριθμός εγγραφών που θα διαβαστούν και θα ταξινομηθούν
-argv[4]: pipe στο οποίο θα γράψουν τα αποτελέσματα (τον ταξινομημένο πίνακα) για να τα στείλει στον γονέα (splitter)
-argv[5]: pid του root

Ανοίγουν το αρχείο και πηγαίνουν τον δείκτη του εκεί που πρέπει.

Διαβάζουν όσες εγγραφές πρέπει και τις ταξινομούν με βάση τον αλγόριθμο.

Χρονομετρούν τον χρόνο που έκαναν (real time and CPU time με βάση τον κώδικα που δόθηκε στην εκφώνηση της εργασίας).

Γράφουν το αποτέλεσμα στο pipe και στο τέλος τον χρόνο που έκαναν.

Στέλνουν σήμα USR2 στον root όταν τελειώσουν.

*merge.c: Αλγόριθμος συγχώνευσης δύο ταξινομημένων πινάκων

Χρησιμοποιείται από τους splitters για συγχόνευση των αποτελεσμάτων που επιστρέφουν οι sorters.

Έπειτα χρησιμοποιείται από το root για συγχόνευση των αποτελεσμάτων που επιστρέφουν οι splitters.

